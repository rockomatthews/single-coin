import { NextRequest, NextResponse } from 'next/server';
import { ethers } from 'ethers';

interface DeploymentRequest {
  name: string;
  symbol: string;
  totalSupply: number;
  decimals?: number;
  owner: string;
  revokeUpdateAuthority?: boolean;
  revokeMintAuthority?: boolean;
  createLiquidity?: boolean;
  liquidityEthAmount?: number;
}

// Reuse Polygon secure ERC-20 bytecode
const SECURE_TOKEN_BYTECODE = "";

const SECURE_TOKEN_ABI = [
  "constructor(string memory name_, string memory symbol_, uint256 initialSupply_, address owner_)",
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address) view returns (uint256)",
  "function transfer(address, uint256) returns (bool)",
  "function approve(address, uint256) returns (bool)",
  "function allowance(address, address) view returns (uint256)",
  "function transferFrom(address, address, uint256) returns (bool)",
  "function finishMinting() external",
  "function renounceOwnership() external",
  "function owner() view returns (address)",
  "function mintingFinished() view returns (bool)",
  "function mint(address, uint256) external",
  "function burn(uint256) external",
  "function burnFrom(address, uint256) external"
];

export async function POST(request: NextRequest) {
  try {
    const body: DeploymentRequest = await request.json();
    const { name, symbol, totalSupply, owner, revokeUpdateAuthority, revokeMintAuthority } = body;

    if (!name || !symbol || !totalSupply || !owner) {
      return NextResponse.json({ success: false, error: 'Missing required parameters' }, { status: 400 });
    }

    const rpcUrl = process.env.QUICKNODE_ARBITRUM_RPC_URL;
    const privateKey = process.env.ARBITRUM_PRIVATE_KEY;
    if (!rpcUrl) return NextResponse.json({ success: false, error: 'QUICKNODE_ARBITRUM_RPC_URL not set' }, { status: 500 });
    if (!privateKey) return NextResponse.json({ success: false, error: 'ARBITRUM_PRIVATE_KEY not set' }, { status: 500 });

    const provider = new ethers.JsonRpcProvider(rpcUrl);
    const wallet = new ethers.Wallet(privateKey, provider);

    const totalSupplyWei = ethers.parseUnits(totalSupply.toString(), 18);
    const contractFactory = new ethers.ContractFactory(SECURE_TOKEN_ABI, SECURE_TOKEN_BYTECODE, wallet);
    const contract = await contractFactory.deploy(name, symbol, totalSupplyWei, owner, { gasLimit: 2_000_000 });

    await contract.waitForDeployment();
    const contractAddress = await contract.getAddress();
    const deploymentTx = contract.deploymentTransaction();

    let securityTxHash: string | undefined;
    if (revokeMintAuthority) {
      const finishMintingFunction = contract.getFunction('finishMinting');
      const finishTx = await finishMintingFunction({ gasLimit: 150_000 });
      await finishTx.wait();
      securityTxHash = finishTx.hash;
    }
    if (revokeUpdateAuthority) {
      const renounceOwnershipFunction = contract.getFunction('renounceOwnership');
      const renounceTx = await renounceOwnershipFunction({ gasLimit: 150_000 });
      await renounceTx.wait();
      securityTxHash = securityTxHash || renounceTx.hash;
    }

    return NextResponse.json({
      success: true,
      tokenAddress: contractAddress,
      txHash: deploymentTx?.hash,
      securityTxHash,
      explorer_url: `https://arbiscan.io/token/${contractAddress}`
    });
  } catch (error) {
    console.error('❌ Arbitrum deploy error:', error);
    return NextResponse.json({ success: false, error: error instanceof Error ? error.message : 'Unknown deployment error' }, { status: 500 });
  }
}
